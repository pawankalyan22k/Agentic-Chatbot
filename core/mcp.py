from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional, Literal
import uuid

# Defines the official names of our agents. Enforces correctness in messaging.
AgentName = Literal["CoordinatorAgent", "IngestionAgent", "RetrievalAgent", "LLMResponseAgent", "UI"]

# Defines the official types of messages. Enforces valid commands.
MessageType = Literal[
    "INGEST_REQUEST", "INGEST_COMPLETE",
    "RETRIEVAL_REQUEST", "RETRIEVAL_RESULT",
    "BUILD_STORE_REQUEST",
    "LLM_REQUEST", "FINAL_RESPONSE"
]

# --- Payload Structures ---
# These models define the expected data for each message type.

class MCPPayload(BaseModel):
    """Base model for all message payloads."""
    pass

class IngestRequestPayload(MCPPayload):
    file_paths: List[str] = Field(..., description="List of absolute paths to documents for ingestion.")

class IngestCompletePayload(MCPPayload):
    status: str = Field(..., description="Status of the ingestion process ('Success' or 'Failure').")
    message: str = Field(..., description="A human-readable message about the ingestion outcome.")

class RetrievalRequestPayload(MCPPayload):
    query: str = Field(..., description="The user's query to be processed.")

class FinalResponsePayload(MCPPayload):
    answer: str = Field(..., description="The final answer generated by the LLM.")
    source_chunks: List[str] = Field(..., description="The source context chunks used for the answer.")

# --- The Master Message Structure ---

class MCPMessage(BaseModel):
    """
    Model Context Protocol (MCP) Message Structure.
    This is the universal format for all inter-agent communication.
    """
    sender: AgentName = Field(..., description="The name of the agent sending the message.")
    receiver: AgentName = Field(..., description="The name of the agent intended to receive the message.")
    type: MessageType = Field(..., description="The type of the message, indicating its purpose.")
    trace_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique ID to trace a request's lifecycle.")
    payload: Dict[str, Any] = Field(..., description="The data payload, validated by the specific payload models.")

    class Config:
        # Ensures that the Literal strings are used as values
        use_enum_values = True